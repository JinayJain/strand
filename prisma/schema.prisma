// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// APPLICATION MODELS
model Strand {
    id        String  @id @default(uuid())
    author_id String
    parent_id String?
    content   String
    story_id  String

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    author     User         @relation(fields: [author_id], references: [id], onDelete: Cascade)
    parent     Strand?      @relation("strand_tree", fields: [parent_id], references: [id])
    children   Strand[]     @relation("strand_tree")
    root_story StrandStory? @relation("story_root_strand")
    story      StrandStory  @relation("strand_story", fields: [story_id], references: [id], onDelete: NoAction)

    @@map("strand")
}

model StrandStory {
    id          String    @id @default(uuid())
    root_id     String    @unique
    title       String
    active_date DateTime? @db.Date

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    root    Strand   @relation("story_root_strand", fields: [root_id], references: [id], onDelete: NoAction)
    strands Strand[] @relation("strand_story")

    @@map("strand_story")
}

enum Role {
    ADMIN
    USER
    GUEST
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    username      String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          Role      @default(USER)

    accounts Account[]
    sessions Session[]
    strands  Strand[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
